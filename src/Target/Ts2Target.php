<?php
/**
 * This file is part of the message-event-protocol.
 *
 * (c) Axel Etcheverry
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * @namespace
 */
namespace Euskadi31\MessageEventProtocol\Target;

use Euskadi31\MessageEventProtocol\Definition\FileDefinition;
use Euskadi31\MessageEventProtocol\Definition\MessageDefinition;
use Euskadi31\MessageEventProtocol\Definition\InterfaceDefinition;
use Euskadi31\MessageEventProtocol\Definition\PropertyDefinition;
use Euskadi31\MessageEventProtocol\Definition\TypeDefinition;
use Euskadi31\MessageEventProtocol\NamingPolicy;

class Ts2Target implements TargetInterface
{
    protected $genericTypes = [
        'String' => 'string',
        'Boolean' => 'boolean',
        'Integer' => 'number',
        'Float' => 'number',
        'DateTime' => 'Date',
        'Any' => 'any'
    ];

    protected $filename;

    public function getName()
    {
        return 'ts2';
    }

    public function getFilename()
    {
        return $this->filename;
    }

    public function getLibrary()
    {
        return <<<EOF
    function pad(value: number): string {
        if (value < 10) {
            return `0\${value}`;
        }

        return `\${value}`;
    }

    function formatDate(date: Date): string {
        return date.getUTCFullYear() +
            '-' + pad(date.getUTCMonth() + 1) +
            '-' + pad(date.getUTCDate());
    }

    function formatDateTime(date: Date): string {
        return date.getUTCFullYear() +
            '-' + pad(date.getUTCMonth() + 1 ) +
            '-' + pad(date.getUTCDate()) +
            'T' + pad(date.getUTCHours()) +
            ':' + pad(date.getUTCMinutes()) +
            ':' + pad(date.getUTCSeconds()) +
            '+0000';
    }
EOF;

    }

    public function generate(FileDefinition $definition)
    {
        $this->filename = $definition->getSrcFile()->getBasename('.mep') . '.ts';

        $content  = '// Code generated by message-event-protocol' . PHP_EOL;
        $content .= '// source: ' . (string) $definition->getSrcFile() . PHP_EOL;
        $content .= '// DO NOT EDIT!' . PHP_EOL;
        $content .= PHP_EOL;

        $imports = array_map(function($item) {
            $file = str_replace('\\', DIRECTORY_SEPARATOR, $item);

            return 'import ' . $item . ' from \'./' . $file. '\';';
        }, $definition->getImports());

        if (!empty($imports)) {
            $content .= implode(PHP_EOL, $imports) . PHP_EOL;
            $content .= PHP_EOL;
        }

        $content .= 'namespace ' . str_replace('\\', '.', $definition->getPackage()) . ' {' . PHP_EOL;
        $content .= PHP_EOL;

        $content .= $this->getLibrary() . PHP_EOL;

        $classes = array_map(function($item) {
            if ($item instanceof MessageDefinition) {
                return $this->generateClass($item);
            } else {
                return $this->generateInterface($item);
            }
        }, $definition->getClasses());

        if (!empty($classes)) {
            $content .= implode(PHP_EOL, $classes) . PHP_EOL;
        }

        $content .= '}' . PHP_EOL;

        return $content;
    }

    protected function generateProperty(PropertyDefinition $definition)
    {
        return '        private ' . $this->generateParameter($definition) . ';';
    }

    protected function getType($type)
    {
        if (isset($this->genericTypes[$type])) {
            $type = $this->genericTypes[$type];
        }

        return $type;
    }

    protected function generateType(TypeDefinition $definition)
    {
        $type = $definition->getType();

        if ($type == 'Set') {
            return sprintf('%s[]', $this->getType($definition->getValueType()));
        } elseif ($type == 'Map') {
            return sprintf('{ [key: %s]: %s }', $this->getType($definition->getKeyType()), $this->getType($definition->getValueType()));
        }

        return $this->getType($type);
    }

    protected function generateParameter(PropertyDefinition $definition)
    {
        $content = $definition->getName();

        if (!$definition->isRequired()) {
            $content .= '?';
        }

        $content .= ': ' . $this->generateType($definition->getType());

        return $content;
    }

    protected function generateMethod(MessageDefinition $messageDef, PropertyDefinition $propertyDef)
    {
        $name = ucfirst($propertyDef->getName());

        $content  = '        public set' . $name . '(' . $this->generateParameter($propertyDef) . '): ' . $messageDef->getName() . ' {' . PHP_EOL;
        $content .= '            this.' . $propertyDef->getName() . ' = ' . $propertyDef->getName() . ';' . PHP_EOL;
        $content .= PHP_EOL;
        $content .= '            return this;' . PHP_EOL;
        $content .= '        }' . PHP_EOL;
        $content .= PHP_EOL;
        $content .= '        public get' . $name . '(): ' . $this->generateType($propertyDef->getType()) . ' {' . PHP_EOL;
        $content .= '            return this.' . $propertyDef->getName() . ';' . PHP_EOL;
        $content .= '        }';

        return $content;
    }

    protected function generatePrototype(PropertyDefinition $definition)
    {
        $name = ucfirst($definition->getName());

        $content  = '        public set' . $name . '(' . $this->generateParameter($definition) . ');' . PHP_EOL;
        $content .= PHP_EOL;
        $content .= '        public get' . $name . '();' . PHP_EOL;

        return $content;
    }

    protected function generateClass(MessageDefinition $definition)
    {
        $content  = '    export class ' . $definition->getName();

        $implements = $definition->getImplementsName();

        if (!empty($implements)) {
            $content .= ' implements ' . $implements;
        }

        $content .= ' {'. PHP_EOL;

        $properties = array_map(function($item) {
            return $this->generateProperty($item);
        }, $definition->getProperties());

        if (!empty($properties)) {
            $content .= implode(PHP_EOL, $properties) . PHP_EOL;
            $content .= PHP_EOL;
        }

        $methods = array_map(function($item) use ($definition) {
            return $this->generateMethod($definition, $item);
        }, $definition->getProperties());

        if (!empty($methods)) {
            $content .= implode(PHP_EOL . PHP_EOL, $methods) . PHP_EOL;
        }

        $content .= PHP_EOL;

        $content .= $this->generateSerializeMethod($definition);

        $content .= '    }' . PHP_EOL;

        return $content;
    }

    protected function generateSerializeMethod(MessageDefinition $definition)
    {
        $fields = array_map(function($property) {
            $naming = new NamingPolicy($property->getName());

            $ref = sprintf('this.%s', $property->getName());

            $type = $property->getType()->getType();

            if ($type == 'DateTime') {
                $ref = sprintf('formatDateTime(%s)', $ref);
            } elseif ($type == 'Date') {
                $ref = sprintf('formatDate(%s)', $ref);
            }

            return sprintf('                \'%s\': %s', $naming->toSnakeCase(), $ref);
        }, $definition->getProperties());

        $content  = '        public toJSON(): { [key: string]: any } {' . PHP_EOL;

        $content .= '            return {' . PHP_EOL;

        $content .= implode(',' . PHP_EOL, $fields) . PHP_EOL;

        $content .= '            };' . PHP_EOL;

        $content .= '        }' . PHP_EOL;

        return $content;
    }

    protected function generateInterface(InterfaceDefinition $definition)
    {
        $content  = 'interface ' . $definition->getName() . ' {' . PHP_EOL;

        $methods = array_map(function($item) {
            return $this->generatePrototype($item);
        }, $definition->getProperties());

        if (!empty($methods)) {
            $content .= implode(PHP_EOL, $methods) . PHP_EOL;
        }

        $content .= '}' . PHP_EOL;

        return $content;
    }
}
